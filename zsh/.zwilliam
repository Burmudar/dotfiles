# User configuration
alias h='cd $HOME'
if [[ $OSTYPE == "darwin"* ]]; then
    export SRC="$HOME/programming/"
else
    export SRC="$HOME/programming"
    export GRADLE_HOME="$SRC/gradle/gradle-5.0"
    export PATH="$PATH:$GRADLE_HOME/bin"
    export GOROOT="/usr/local/go"
    # snap
    export PATH="$PATH:/snap/bin"
fi

export SSH_KEY_FOLDER="$HOME/.ssh/keys"
export GOPATH="$SRC/golang"
export GOBIN="$GOPATH/bin"
export PATH="$PATH:$GOBIN"
export PATH="$PATH:$SRC/bin"

# aliases
alias aenv='source $(find . -name "activate")'
alias denv='deactivate'

# Preferred editor for local and remote sessions
export EDITOR='vim'

# correct locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# nice terminal colours
export TERM=xterm-256color

# Work config
export no_proxy=".oraclecorp.com,.oracle.com,.nimbula.org,localhost,127.0.0.1"
export NO_PROXY=".oraclecorp.com,.oracle.com,.nimbula.org,localhost,127.0.0.1"

# aliases
alias cat='bat'

if type "tmux-next" &> /dev/null; then
    alias tmux='tmux-next -2' #tmux installed from ppa named its binary tmux-next
fi

ssh_add_keys_from_folder () {
    KEY_FOLDER=${1:-$HOME/.ssh/keys/}
    
    if !pgrep ssh-agent > /dev/null; then
        echo "FAILED"
    else
        echo "SUCCESS"
    fi
}

uproxies () {
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
}

proxies () {
    export http_proxy=http://www-proxy-lon.uk.oracle.com:80
    export https_proxy=http://www-proxy-lon.uk.oracle.com:80
    export HTTP_PROXY=http://www-proxy-lon.uk.oracle.com:80
    export HTTPS_PROXY=http://www-proxy-lon.uk.oracle.com:80
}

_ensure_ssh_agent_running() {
    if ! pgrep ssh-agent > /dev/null; then
        ssh-agent -s
    fi
}

load_keys () {
    _ensure_ssh_agent_running
    FOLDER=${1:-$SSH_KEY_FOLDER}

    AUTH_SOCK=$(env | grep SSH_AUTH_SOCK | sed s/SSH_AUTH_SOCK=//)
    AGENT_PID=$(env | grep SSH_AGENT_PID | sed s/SSH_AGENT_PID=//)

    eval `SSH_AUTH_SOCK="${AUTH_SOCK}"`
    eval `SSH_AGENT_PID="${AGENT_PID}"`


    for k in ${FOLDER}/*.pvt
    do
        ssh-add "$k"
    done
}

# Setup environment by executing funcs
eval "$(starship init zsh)"
load_keys
