# User configuration
alias h='cd $HOME'
if [[ $OSTYPE == "darwin"* ]]; then
    export SRC="$HOME/programming/"
    export PATH="/usr/local/share/python:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    export GOROOT=/usr/local/go
    export PATH=$PATH:$GOROOT/bin
else
    export SRC="$HOME/programming"
    export GRADLE_HOME="$SRC/gradle/gradle-5.0"
    export PATH="$PATH:$GRADLE_HOME/bin"
    export GOROOT="/usr/local/go"
    export GOPATH="$SRC/golang"
    export GOBIN="$GOPATH/bin"

    export PATH="$PATH:$GOROOT/bin"
    export PATH="$PATH:$GOBIN"
fi

export PATH="$PATH:$SRC/bin"

# aliases
alias aenv='source $(find . -name "activate")'
alias denv='deactivate'

# Preferred editor for local and remote sessions
export EDITOR='vim'

# correct locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# nice terminal colours
export TERM=xterm-256color

# Work config
export RUNLOCAL_LOCATION='ZA'
export CONTROLPLANE="$HOME/programming/compute-controlplane"
export FARM="$HOME/programming/compute-farm"
export PATH="$PATH:$FARM"
export no_proxy=".oraclecorp.com,.oracle.com,.nimbula.org,localhost,127.0.0.1"
export NO_PROXY=".oraclecorp.com,.oracle.com,.nimbula.org,localhost,127.0.0.1"

# aliases
alias gts='cd $HOME/programming'
alias gtc='cd $CONTROLPLANE'
alias gts='cd $SRC'
alias gtf='cd $FARM'
alias cf='compute-farm'
alias aenv='source $(find . -name "activate")'
alias denv='deactivate'

if type "tmux-next" &> /dev/null; then
    alias tmux='tmux-next -2' #tmux installed from ppa named its binary tmux-next
fi

uproxies () {
    unset http_proxy
    unset https_proxy
    unset HTTPS_PROXY
    unset HTTPS_PROXY
}

proxies () {
    export http_proxy=http://www-proxy-lon.uk.oracle.com:80
    export https_proxy=http://www-proxy-lon.uk.oracle.com:80
    export HTTP_PROXY=http://www-proxy-lon.uk.oracle.com:80
    export HTTPS_PROXY=http://www-proxy-lon.uk.oracle.com:80
}

fb () {
    nim && fabush $1
}

nim () {
    gtc && aenv
}

pj () {
    QUERY=${1:-''}

    if [ ! -z ${QUERY} ]
    then
        echo $QUERY
        cd $SRC/$(ls $SRC | peco --select-1 --query $QUERY --prompt 'project:')
    else
        cd $SRC/$(ls $SRC | peco --prompt 'project:')
    fi
}

gitb () {
    QUERY=${1:-''}
    PROMPT="branch:"
    BRANCH=""

    BRANCHES=$(git branch -a | sed -n -e 's/remotes\/origin\///p')

    if [ ! -z ${QUERY} ]
    then
        echo $QUERY
        BRANCH=$(echo ${BRANCHES} | peco --select-1 --query ${QUERY} --prompt ${PROMPT})
    else
        BRANCH=$(echo ${BRANCHES} | peco --prompt ${PROMPT})
    fi

    git checkout $(echo -e "${BRANCH}" | tr -d '[:space:]')
}

# github.com/bhilburn/powerlevel9k
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time virtualenv)

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
